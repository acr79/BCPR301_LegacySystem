------------------------------------------------------------------------------
BCPR301 Legacy System - ERP - Employee Record Program

Command to start CLI:

    > python RunMain.py

------------------------------------------------------------------------------
ABOUT REFACTORED CODE

The original code is in the package __ORIGINAL, and the refactored code is in
 the package __UPDATED.
The original is not literally 0316_AstonRees_ERP.py unmodified.
- Classes have been separarted into their own modules
- Corrective action was made to make the original code testable, which mostly
   included loosening the encapsulated Controller, of cmd.Cmd

__ORIGINAL was brought up to a testable state, then that code has been
 refactored from a copy in __UPDATED, and the tests then applied to the
 __UPDATED package.

------------------------------------------------------------------------------
ABOUT UNIT TESTS

The programmer has agreed with the tutor that the unit test modules can be
 exempt from PEP8 coding standards only in areas that describe the problem as:
    "module level import not at top of file"

Unit test modules have the prefix "UT_", all off them are exercised on
 UT__TestMaster. When running these unit tests, the path of the class package
 to be tested must be specified as an argument via cmd.

    > python <UT_> <Package directory>

    > coverage run <UT_> <Package directory>

This allows the unit test to check either the __ORIGINAL package or the
 __UPDATED package

------------------------------------------------------------------------------
ABOUT TESTVIEW

TestView is a module with the class under the same name appearing in both
 __ORIGINAL and __UPDATED.
Some tests are based on what should be output to the View, so to address this
 challenge the programmer redefined the original View as implementing
 AbstractView, and TestView implementing AbstractView.
Use of TestView().show(message) appends message to a list in TestView module,
 which can be checked for test cases concerned with specific ERP output.

------------------------------------------------------------------------------
COVERAGE

Overall coverage is over 80%, both in __ORIGINAL and __UPDATED
As the graphic methods of Controller were not refactored, they have been
 excluded using
    # pragma: no cover

 which the coverage program interprets

------------------------------------------------------------------------------
MARKING

The programmer has aimed for the full mark

About five refactoring sessions were attempted
Four were acted upon, three went well
One was all right, but the technical action was code shifting

THE REFACTORING SESSIONS to be marked are
1, 4, and 5
The report on session 2 has been included as a separate file in respository

Session number for code treatment is based on the directories used in the
 past, on the repository

------------------------------------------------------------------------------
SESSION 1

Unit test: UT_Record.py

Smell name: Primitive Obsession, Duplicate Code

Location: __ORIGINAL Record.py Record
   Functions at LOC 46, 58, 74

Reasons:
The need to keep Record's integer attributes valid has influenced common
 behaviour onto the accessor, setter-methods.
Each of the integer setter-methods practically has the same behaviour, a
 somewhat complex operation to approve of the new specified value.
Because these integer-attributes are bound to some behaviour/guarantee, it is
 worth segregating them from primitive integers: Give them their own
 type/class.

Process:
The duplicate pattern in Python:

    def setIncome(self, newIncome):
        trial = None
        if isinstance(newIncome, int):
            trial = newIncome
        elif isinstance(newIncome, str):
            try:
                trial = int(newIncome)
            except ValueError:
                pass
        if trial is not None and (0 <= trial <= 999):
            self._income = trial

This can become a class. Therefore, Record class would refer to three
 instances of the proposed class for each of its controlled integer
 attributes.
The differences in practical-duplications of the method above are the naming
 of attributes, parameters, and the limits of the integer.

https://sourcemaking.com/refactoring/replace-data-value-with-object
The refactoring technique replaced data value with object, the class is
 LimitedInt.
SourceMaking recommends that setting the value of the (original) class'
 attribute would actually create a new LimitedInt.
Instead, it will be more ideal to keep each LimitedInt persistent to
 the lifetime of the Record object. This is because the whole purpose of the
 original setter-methods was to only assign the new value if it was deemed
 valid. When the instance of LimitedInt is created, its limits are
 set, and its value can always be changed.
If the LimitedInt had to be reconstructed upon each successful use
 of the relevant Record setter-methods, then the constructor would have to
 take:
    def __init__(self, newValue, lowLimit, highLimit):
 which then still requires each setter-method to implement their own
 conditional statement, and/or error handling statement (the LimitedInt class
 would need the potential to raise an error in the constructor).

Refactoring review:
- Record now refers to three instances of LimitedInt. Behaviour was
   established for LimitedInt as it was added to the __UPDATED package, then
   Record's relevant accessor methods were changed to make calls to LimitedInt
- Unit testing is focused on Record class, and the methods used to edit its
   integer attributes were the main focus
- It is unknown if the code smell would have been found if Record only had one
   integer attribute

------------------------------------------------------------------------------
SESSION 4

Unit test: UT_FilerFunctionality.py
- The unit test was developed for session 2, though became valuable for
   testing in session 4

Smell name: Switch Statement

Location: __ORIGINAL RunMain.py
    LOC: 58-63

Reasons:
The purpose of the switch statement is to decide what action, if any, is to be
 taken based on the prefix of each string-element passed into the method
 main(boolean, list) in the list. The programmer had used prefix codes to
 allow the ERP to be extended with more optional-functions to be run upon
 calling main(boolean, list), where sys.argv will be passed as list if
 RunMain.py is run in cmd). If the prefix of a string-element is recognised by
 the program, then an action is performed that will use the rest of that
 string-element as information. The problem is that adding or removing these
 optional actions would involve modifying this function directly, which also
 would require it to provide the behaviour for running the action.

So far, a couple of patterns are apparent. For identifying the associated
 action, the prefix of a string is defined up to and including a colon letter
 (:). The current, two optional actions that can get triggered with a
 recognisable prefix both return a tuple of (data, string). The point
 of having these two actions is that the data each returns is different to
 another (returns different class object, or not even an object), and the
 string contains details of how the action's flow went.

The importance of this functionality in RunMain is that the optional actions
 can be run before the Controller (of type cmd.Cmd) starts the CLI. As stated
 before, these actions return data of interest (it might not be an
 instantiated object), in order to affect something else (by assignment to
 some other variable). Currently, the serial load is designed to return an
 instance of RecordCollection, however the view import is designed to return
 a class that implements AbstractView (no instance). Alternative/exception
 flows would have the functions return None. The view import function could be
 altered to return an instance of AbstractView, but this is probably not even
 an issue for refactoring the switch statement.

Because the return values of these actions (and like future actions) are not
 predictable, it is best to define a separate class for each action, and have
 these classes abide to an interface (will be abstract class in Python). When
 the interface method gets called, the class object will perform its
 respective action. Now, calling that common method will return a string
 report, and that is all; what happens is that an attribute of the specific
 class object may or may not get altered from the running of the action.

Process:
https://sourcemaking.com/refactoring/replace-conditional-with-polymorphism
The techniques included replacing conditional with polymorphism, which lead to
 the creation of the following abstract class

class AbstractActor(metaclass=ABCMeta):
    @abstractmethod
    def doAction(self, strData):
        pass

The implementers, SerialLoadActor and ViewImportActor are known by class for
 setting up specific objects for Controller construction, but in terms of the
 functionality when figuring what actions must be done from the method
 arguments, they are called using AbstractActor.doAction() method.
- SerialLoadActor.getLoadedRecordCollection() returns a RecordCollection
   object, or None
- ViewImportActor.getImportedViewClass() returns a class that implements
   AbstractView, or None

Refactoring review:
- SourceMaking strongly recommendeds a class hierarchy for resolving switch
   statements, and this was achieved by the class Initialiser, which would
   makes references to the useful AbstractActor implementers.
- A Python dict {} aids in the elimination of the switch statement, which
   matches the key to an instance of AbstractActor.

------------------------------------------------------------------------------
SESSION 5

Unit test: UT_AffectedFunctions.py, UT_ObjectSelection.py

Smell name: Duplicate Code, Alternative Classes With Different Interfaces

Location: __ORIGINAL Controller.py Controller
    LOC 58-92, 168-194, 316-410

Reasons:
The motivation behind these functions is to check the object-selection state
 of Controller, to determine if it has a record, option, or nothing selected.
Similar algorithms lead to duplicate code, though the deeper reason could be
 described as alternative classes with different interfaces, and this smell
 might simply be contained to Controller.

First, it must be clarified that the classes have identical functionality from
 the perspective of the Controller only. What is happening is that the classes
 Record, Option, and RecordCollection are getting represented as a string, and
 the Controller has two selected-object attributes: One of Record, one of
 Option, and these can be None. There is currently a rule that the Controller
 can only have an Option selected or a Record selected, i.e. at all times
 at least one of _selectedRecord and _selectedOption must be None - or, with
 extensibility in mind, only one of these attributes can refer to something
 other than None.

There are many methods that check the state of the selected-object attribute,
 so defining what really constitutes as a selected object can be defined by
 some interface

Common behaviour from Controller's perspective:
- Can be selected as an object
- String representation

It is possible that Record and Option can adopt an interface that matches the
 behaviour above, but this commonality is from the perspective of the 
 Controller only. In this case it might be ideal to introduce composite
 classes, that will refer to an instance of Record or Option.

class AbstractObjectInfo(metaclass=ABCMeta):

    @abstractmethod
    def getAsString(self):
        pass

    @abstractmethod
    def getFunctionDesc(self):
        pass

    @abstractmethod
    def getClassObject(self):
        pass

For example, even Controller can inherit from AbstractObjectInfo

    def getAsString(self):
        return "Records in ERP: {}".format(len(self._theColl.getAllRecords()))

    def getFunctionDesc(self):
        return ""

    def getClassObject(self):
        return self

Now, a lot of updating methods need to check the state of the selected-object.
 For example to edit a record a record must be selected, so ultimately it must
 assert that the object from AbstractObjectInfo.getClassObject() is actually a
 Record instance (Controller's selected object would always implement
 AbstractObjectInfo).
Basically, the goal of a public method like do_edit_age() would be to simply
 call editAge() of the selected class object, so an interface was designed to
 allow implementers to encapsulate the details of what class the called object
 must belong to, and also what method is called of the class object.

class AbstractObjectCaller(metaclass=ABCMeta):

    @abstractmethod
    def setObject(self, theObject):
        pass

    @abstractmethod
    def callObject(self):
        pass

So an instance of AbstractObjectCaller would be sent to a protected method of
 Controller, which basically does two things for a main flow scenario:
- Set the object to the Controller's selected object using setObject()
- Use callObject()

    def _callSelectedObject(self, theObjectCaller, mainMessage, excMessage):

#>>>>>> Using AbstractObjectInfo >>>>>>>>>>>>>>>>>>>>>>>>
        trial = self._selectedObject.getClassObject()
        try:
#>>>>>>>>>> Using AbstractObjectCaller >>>>>>>>>>>>>>>>>>
            theObjectCaller.setObject(trial)
            theObjectCaller.callObject()
            self._showSelectedObjectInfo(mainMessage)
        except CustomException as e:
            self._selectedObject = self
            self._myView.show(excMessage)

OptionObjectCaller.py
RecordObjectCaller.py

Refactoring review:
- Introducing the AbstractObjectCaller interface improved code smell treatment
   for the refactoring session, as this avoided duplicate algorithm duplication
   for updating methods that check the state of Controller's selected object.
- The first step was developing AbstractObjectInfo, and then
   AbstractObjectCaller was developed before the first interface was used in
   __UPDATED.
- There is now a wide range of interface implementations, this is good as it
   has prevented switch statements from appearing.

------------------------------------------------------------------------------
______________________________________________________________________________